{"ast":null,"code":"import _asyncToGenerator from \"/Users/martintee/Desktop/shopping-cart/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject, Subject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../data-storage.service\";\nimport * as i4 from \"../requests.service\";\nexport class AuthService {\n  constructor(http, router, dataStorageService, requestsService) {\n    this.http = http;\n    this.router = router;\n    this.dataStorageService = dataStorageService;\n    this.requestsService = requestsService;\n    this.user = new BehaviorSubject(null);\n    this.showAutoLogoutModal = new Subject();\n  }\n\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCsBdn7ko9gfo8Yzr6Z3SST4UyUyb0TOLs', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCsBdn7ko9gfo8Yzr6Z3SST4UyUyb0TOLs', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occured!';\n\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists already';\n        break;\n\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist.';\n        break;\n\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct';\n        break;\n    }\n\n    return throwError(errorMessage);\n  }\n\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n\n  logout() {\n    this.user.next(null); // console.log('logging out...');\n\n    this.dataStorageService.updatedCurrentProfile.next(null);\n    this.dataStorageService.emptyCart();\n    this.dataStorageService.updatedCartCount.next(null);\n    this.dataStorageService.emptyOrderHistory();\n    this.router.navigate(['']);\n    localStorage.removeItem('userData');\n    this.requestsService.fetchCategories();\n    this.requestsService.fetchProducts();\n    this.requestsService.fetchProfiles();\n\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n  }\n\n  autoLogout(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.dataStorageService.triggerModalCloseForAutoLogout.next(true);\n      this.logout();\n      this.showAutoLogoutModal.next(true);\n    }, expirationDuration);\n  }\n\n  autoLogin() {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (!userData) return;\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n    if (loadedUser.token) {\n      this.user.next(loadedUser);\n      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration);\n      this.syncLoggedInEmailAsCurrentProfile();\n    }\n  }\n\n  getAuthenticatedUser() {\n    return new Promise((resolve, reject) => {\n      this.user.subscribe(authenticatedUser => {\n        if (authenticatedUser) resolve(authenticatedUser);\n      });\n    });\n  }\n\n  getProfiles() {\n    return new Promise((resolve, reject) => {\n      this.requestsService.fetchProfiles();\n      this.requestsService.updatedProfiles.subscribe(updatedProfiles => {\n        if (updatedProfiles.length > 0) resolve(updatedProfiles);\n      });\n    });\n  }\n\n  syncLoggedInEmailAsCurrentProfile() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield Promise.all([_this.getAuthenticatedUser(), _this.getProfiles()]);\n      const [authenticatedUser, updatedProfiles] = data; // console.log(authenticatedUser);\n      // console.log(updatedProfiles);\n\n      const index = updatedProfiles.findIndex(profile => profile.email === authenticatedUser.email); //console.log(index);\n\n      if (index === -1) {\n        _this.router.navigate(['/create-profile']);\n      } else {\n        const currentUpdatedProfile = updatedProfiles.find(profile => profile.email === authenticatedUser.email);\n\n        _this.dataStorageService.updatedCurrentProfile.next(currentUpdatedProfile);\n\n        _this.dataStorageService.orderHistory = currentUpdatedProfile.orderHistory;\n        _this.dataStorageService.cart = currentUpdatedProfile.cart;\n\n        _this.dataStorageService.updatedCart.next(currentUpdatedProfile.cart);\n\n        _this.router.navigate(['/categories'], {\n          queryParams: {\n            allowEdit: currentUpdatedProfile.accessType === 'admin' ? '1' : '0'\n          }\n        }); //console.log(currentUpdatedProfile.cart);\n\n\n        _this.dataStorageService.updatedCart.next(currentUpdatedProfile.cart);\n\n        _this.dataStorageService.updateCartCount();\n      }\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.DataStorageService), i0.ɵɵinject(i4.RequestsService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/martintee/Desktop/shopping-cart/src/app/auth/auth.service.ts"],"names":["BehaviorSubject","Subject","throwError","catchError","tap","User","i0","i1","i2","i3","i4","AuthService","constructor","http","router","dataStorageService","requestsService","user","showAutoLogoutModal","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","errorRes","errorMessage","error","message","userId","token","expirationDate","Date","getTime","next","autoLogout","localStorage","setItem","JSON","stringify","logout","updatedCurrentProfile","emptyCart","updatedCartCount","emptyOrderHistory","navigate","removeItem","fetchCategories","fetchProducts","fetchProfiles","tokenExpirationTimer","clearTimeout","expirationDuration","setTimeout","triggerModalCloseForAutoLogout","autoLogin","userData","parse","getItem","loadedUser","id","_token","_tokenExpirationDate","syncLoggedInEmailAsCurrentProfile","getAuthenticatedUser","Promise","resolve","reject","subscribe","authenticatedUser","getProfiles","updatedProfiles","length","data","all","index","findIndex","profile","currentUpdatedProfile","find","orderHistory","cart","updatedCart","queryParams","allowEdit","accessType","updateCartCount","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","Router","DataStorageService","RequestsService","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, Subject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../data-storage.service\";\nimport * as i4 from \"../requests.service\";\nexport class AuthService {\n    constructor(http, router, dataStorageService, requestsService) {\n        this.http = http;\n        this.router = router;\n        this.dataStorageService = dataStorageService;\n        this.requestsService = requestsService;\n        this.user = new BehaviorSubject(null);\n        this.showAutoLogoutModal = new Subject();\n    }\n    signup(email, password) {\n        return this.http\n            .post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCsBdn7ko9gfo8Yzr6Z3SST4UyUyb0TOLs', {\n            email: email,\n            password: password,\n            returnSecureToken: true,\n        })\n            .pipe(catchError(this.handleError), tap((resData) => {\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n        }));\n    }\n    login(email, password) {\n        return this.http\n            .post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCsBdn7ko9gfo8Yzr6Z3SST4UyUyb0TOLs', {\n            email: email,\n            password: password,\n            returnSecureToken: true,\n        })\n            .pipe(catchError(this.handleError), tap((resData) => {\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n        }));\n    }\n    handleError(errorRes) {\n        let errorMessage = 'An unknown error occured!';\n        if (!errorRes.error || !errorRes.error.error) {\n            return throwError(errorMessage);\n        }\n        switch (errorRes.error.error.message) {\n            case 'EMAIL_EXISTS':\n                errorMessage = 'This email exists already';\n                break;\n            case 'EMAIL_NOT_FOUND':\n                errorMessage = 'This email does not exist.';\n                break;\n            case 'INVALID_PASSWORD':\n                errorMessage = 'This password is not correct';\n                break;\n        }\n        return throwError(errorMessage);\n    }\n    handleAuthentication(email, userId, token, expiresIn) {\n        const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n        const user = new User(email, userId, token, expirationDate);\n        this.user.next(user);\n        this.autoLogout(expiresIn * 1000);\n        localStorage.setItem('userData', JSON.stringify(user));\n    }\n    logout() {\n        this.user.next(null);\n        // console.log('logging out...');\n        this.dataStorageService.updatedCurrentProfile.next(null);\n        this.dataStorageService.emptyCart();\n        this.dataStorageService.updatedCartCount.next(null);\n        this.dataStorageService.emptyOrderHistory();\n        this.router.navigate(['']);\n        localStorage.removeItem('userData');\n        this.requestsService.fetchCategories();\n        this.requestsService.fetchProducts();\n        this.requestsService.fetchProfiles();\n        if (this.tokenExpirationTimer) {\n            clearTimeout(this.tokenExpirationTimer);\n        }\n    }\n    autoLogout(expirationDuration) {\n        this.tokenExpirationTimer = setTimeout(() => {\n            this.dataStorageService.triggerModalCloseForAutoLogout.next(true);\n            this.logout();\n            this.showAutoLogoutModal.next(true);\n        }, expirationDuration);\n    }\n    autoLogin() {\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        if (!userData)\n            return;\n        const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n        if (loadedUser.token) {\n            this.user.next(loadedUser);\n            const expirationDuration = new Date(userData._tokenExpirationDate).getTime() -\n                new Date().getTime();\n            this.autoLogout(expirationDuration);\n            this.syncLoggedInEmailAsCurrentProfile();\n        }\n    }\n    getAuthenticatedUser() {\n        return new Promise((resolve, reject) => {\n            this.user.subscribe((authenticatedUser) => {\n                if (authenticatedUser)\n                    resolve(authenticatedUser);\n            });\n        });\n    }\n    getProfiles() {\n        return new Promise((resolve, reject) => {\n            this.requestsService.fetchProfiles();\n            this.requestsService.updatedProfiles.subscribe((updatedProfiles) => {\n                if (updatedProfiles.length > 0)\n                    resolve(updatedProfiles);\n            });\n        });\n    }\n    async syncLoggedInEmailAsCurrentProfile() {\n        const data = await Promise.all([\n            this.getAuthenticatedUser(),\n            this.getProfiles(),\n        ]);\n        const [authenticatedUser, updatedProfiles] = data;\n        // console.log(authenticatedUser);\n        // console.log(updatedProfiles);\n        const index = updatedProfiles.findIndex((profile) => profile.email === authenticatedUser.email);\n        //console.log(index);\n        if (index === -1) {\n            this.router.navigate(['/create-profile']);\n        }\n        else {\n            const currentUpdatedProfile = updatedProfiles.find((profile) => profile.email === authenticatedUser.email);\n            this.dataStorageService.updatedCurrentProfile.next(currentUpdatedProfile);\n            this.dataStorageService.orderHistory = currentUpdatedProfile.orderHistory;\n            this.dataStorageService.cart = currentUpdatedProfile.cart;\n            this.dataStorageService.updatedCart.next(currentUpdatedProfile.cart);\n            this.router.navigate(['/categories'], {\n                queryParams: {\n                    allowEdit: currentUpdatedProfile.accessType === 'admin' ? '1' : '0',\n                },\n            });\n            //console.log(currentUpdatedProfile.cart);\n            this.dataStorageService.updatedCart.next(currentUpdatedProfile.cart);\n            this.dataStorageService.updateCartCount();\n        }\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.DataStorageService), i0.ɵɵinject(i4.RequestsService)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}