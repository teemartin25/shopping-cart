{"ast":null,"code":"import _asyncToGenerator from \"/Users/martintee/Desktop/shopping-cart/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject, Subject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../data-storage.service\";\nimport * as i4 from \"../requests.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, dataStorageService, requestsService) {\n      this.http = http;\n      this.router = router;\n      this.dataStorageService = dataStorageService;\n      this.requestsService = requestsService;\n      this.user = new BehaviorSubject(null);\n      this.showAutoLogoutModal = new Subject();\n    }\n\n    signup(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCsBdn7ko9gfo8Yzr6Z3SST4UyUyb0TOLs', {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    login(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCsBdn7ko9gfo8Yzr6Z3SST4UyUyb0TOLs', {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    handleError(errorRes) {\n      let errorMessage = 'An unknown error occured!';\n\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMessage);\n      }\n\n      switch (errorRes.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'This email exists already';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'This email does not exist.';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'This password is not correct';\n          break;\n      }\n\n      return throwError(errorMessage);\n    }\n\n    handleAuthentication(email, userId, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, userId, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(expiresIn * 1000);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    logout() {\n      this.user.next(null); // console.log('logging out...');\n\n      this.dataStorageService.updatedCurrentProfile.next(null);\n      this.dataStorageService.emptyCart();\n      this.dataStorageService.updatedCartCount.next(null);\n      this.dataStorageService.emptyOrderHistory();\n      this.router.navigate(['']);\n      localStorage.removeItem('userData');\n      this.requestsService.fetchCategories();\n      this.requestsService.fetchProducts();\n      this.requestsService.fetchProfiles();\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n    }\n\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.dataStorageService.triggerModalCloseForAutoLogout.next(true);\n        this.logout();\n        this.showAutoLogoutModal.next(true);\n      }, expirationDuration);\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n      if (!userData) return;\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n        this.syncLoggedInEmailAsCurrentProfile();\n      }\n    }\n\n    getAuthenticatedUser() {\n      return new Promise((resolve, reject) => {\n        this.user.subscribe(authenticatedUser => {\n          if (authenticatedUser) resolve(authenticatedUser);\n        });\n      });\n    }\n\n    getProfiles() {\n      return new Promise((resolve, reject) => {\n        this.requestsService.fetchProfiles();\n        this.requestsService.updatedProfiles.subscribe(updatedProfiles => {\n          if (updatedProfiles.length > 0) resolve(updatedProfiles);\n        });\n      });\n    }\n\n    syncLoggedInEmailAsCurrentProfile() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const data = yield Promise.all([_this.getAuthenticatedUser(), _this.getProfiles()]);\n        const [authenticatedUser, updatedProfiles] = data; // console.log(authenticatedUser);\n        // console.log(updatedProfiles);\n\n        const index = updatedProfiles.findIndex(profile => profile.email === authenticatedUser.email); //console.log(index);\n\n        if (index === -1) {\n          _this.router.navigate(['/create-profile']);\n        } else {\n          const currentUpdatedProfile = updatedProfiles.find(profile => profile.email === authenticatedUser.email);\n\n          _this.dataStorageService.updatedCurrentProfile.next(currentUpdatedProfile);\n\n          _this.dataStorageService.orderHistory = currentUpdatedProfile.orderHistory;\n          _this.dataStorageService.cart = currentUpdatedProfile.cart;\n\n          _this.dataStorageService.updatedCart.next(currentUpdatedProfile.cart);\n\n          _this.router.navigate(['/categories'], {\n            queryParams: {\n              allowEdit: currentUpdatedProfile.accessType === 'admin' ? '1' : '0'\n            }\n          }); //console.log(currentUpdatedProfile.cart);\n\n\n          _this.dataStorageService.updatedCart.next(currentUpdatedProfile.cart);\n\n          _this.dataStorageService.updateCartCount();\n        }\n      })();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.DataStorageService), i0.ɵɵinject(i4.RequestsService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}